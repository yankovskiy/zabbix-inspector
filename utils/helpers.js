export const utils = {
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
    formatUptime(seconds) {
        if (seconds < 60) {
            return `${seconds} —Å–µ–∫—É–Ω–¥`;
        }

        const minutes = Math.floor(seconds / 60);
        if (minutes < 60) {
            return `${minutes} –º–∏–Ω—É—Ç`;
        }

        const hours = Math.floor(minutes / 60);
        const remainingMinutes = minutes % 60;
        if (hours < 24) {
            return `${hours}—á ${remainingMinutes}–º`;
        }

        const days = Math.floor(hours / 24);
        const remainingHours = hours % 24;
        return `${days}–¥ ${remainingHours}—á ${remainingMinutes}–º`;
    },

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    formatFileSize(bytes) {
        if (bytes === 0) return '0 B';
        
        const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(1024));
        const value = bytes / Math.pow(1024, i);
        
        return `${value.toFixed(i === 0 ? 0 : 1)} ${sizes[i]}`;
    },

    // –ö—Ä–∞—Ç–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    formatBytesShort(bytes) {
        if (bytes >= 1024 * 1024 * 1024) {
            return `${Math.round(bytes / (1024 * 1024 * 1024))}Gb`;
        } else if (bytes >= 1024 * 1024) {
            return `${Math.round(bytes / (1024 * 1024))}Mb`;
        } else if (bytes >= 1024) {
            return `${Math.round(bytes / 1024)}Kb`;
        }
        return `${bytes}B`;
    },


    // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
    showError(message) {
        const errorMessage = document.getElementById('errorMessage');
        if (errorMessage) {
            errorMessage.textContent = message;
            errorMessage.style.display = 'block';
        }
    },

    // –°–±—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    resetPageContent() {
        // –°–±—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±–∑–æ—Ä–∞ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        const dashboard = document.getElementById('overviewDashboard');
        if (dashboard) {
            dashboard.innerHTML = `
                <div class="card">
                    <div class="card-header">
                        <div class="card-icon">üñ•Ô∏è</div>
                        <div class="card-title">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ</div>
                    </div>
                    <div class="metric">
                        <span class="metric-label">–°—Ç–∞—Ç—É—Å</span>
                        <span class="metric-value">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ</span>
                    </div>
                </div>
                <div class="card">
                    <div class="card-header">
                        <div class="card-icon">üìä</div>
                        <div class="card-title">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Zabbix</div>
                    </div>
                    <div class="metric">
                        <span class="metric-label">–°—Ç–∞—Ç—É—Å</span>
                        <span class="metric-value">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span>
                    </div>
                </div>
                <div class="card">
                    <div class="card-header">
                        <div class="card-icon">‚ö†Ô∏è</div>
                        <div class="card-title">–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Zabbix</div>
                    </div>
                    <div class="metric">
                        <span class="metric-label">–°—Ç–∞—Ç—É—Å</span>
                        <span class="metric-value">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span>
                    </div>
                </div>
                <div class="card">
                    <div class="card-header">
                        <div class="card-icon">üíæ</div>
                        <div class="card-title">–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–µ–π Zabbix</div>
                    </div>
                    <div class="metric">
                        <span class="metric-label">–°—Ç–∞—Ç—É—Å</span>
                        <span class="metric-value">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span>
                    </div>
                </div>
            `;
        }

        // –°–±—Ä–æ—Å –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        const defaultContent = '<div class="metric"><span class="metric-label">–°—Ç–∞—Ç—É—Å</span><span class="metric-value">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span></div>';

        const processStats = document.getElementById('processStats');
        const systemStats = document.getElementById('systemStats');

        if (processStats) processStats.innerHTML = defaultContent;
        if (systemStats) systemStats.innerHTML = defaultContent;

        // –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        const diagnosticsDashboard = document.getElementById('diagnosticsDashboard');
        if (diagnosticsDashboard) {
            diagnosticsDashboard.innerHTML = `
                <div class="card">
                    <div class="card-header">
                        <div class="card-icon">üîí</div>
                        <div class="card-title">–°–∏—Å—Ç–µ–º–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏</div>
                    </div>
                    ${defaultContent}
                </div>
            `;
        }
    },

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
    validateData(data, requiredFields = [], options = {}) {
        if (!data) return false;

        const { strict = false, nonEmpty = false } = options;

        return requiredFields.every(field => {
            const fieldParts = field.split('.');
            let current = data;

            for (const part of fieldParts) {
                if (current === null || current === undefined) {
                    return false;
                }
                
                // –í —Å—Ç—Ä–æ–≥–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º hasOwnProperty, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                if (strict ? !current.hasOwnProperty(part) : !(part in current)) {
                    return false;
                }
                
                current = current[part];
            }

            // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
            if (nonEmpty) {
                if (current === null || current === undefined || current === '') {
                    return false;
                }
                if (Array.isArray(current) && current.length === 0) {
                    return false;
                }
            }

            return true;
        });
    },

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    safeGet(obj, path, defaultValue = null) {
        if (!obj || !path) return defaultValue;

        const keys = Array.isArray(path) ? path : path.split('.');
        let current = obj;

        for (const key of keys) {
            if (current === null || current === undefined) {
                return defaultValue;
            }
            
            // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤ –∏ –æ–±—ä–µ–∫—Ç–æ–≤
            if (typeof current === 'object' && key in current) {
                current = current[key];
            } else {
                return defaultValue;
            }
        }

        return current;
    },

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
    formatNumber(num, decimals = 2) {
        if (num === null || num === undefined || isNaN(num)) {
            return '0';
        }

        return Number(num).toFixed(decimals);
    },

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
    formatLargeNumber(num, separator = ' ') {
        if (num === null || num === undefined || isNaN(num)) {
            return '0';
        }

        return Math.floor(num).toString().replace(/\B(?=(\d{3})+(?!\d))/g, separator);
    },

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
    getStatus(value, thresholds) {
        if (!thresholds || value === null || value === undefined) {
            return 'good';
        }

        if (value >= thresholds.critical) {
            return 'critical';
        } else if (value >= thresholds.warning) {
            return 'warning';
        } else {
            return 'good';
        }
    },

    // –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
    parseRegexMatch(content, pattern, fields = []) {
        if (!content || !pattern) {
            return null;
        }

        const match = content.match(pattern);
        if (!match) {
            return null;
        }

        // –ï—Å–ª–∏ –ø–æ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –º–∞—Å—Å–∏–≤ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        if (fields.length === 0) {
            return match;
        }

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        const result = {};
        fields.forEach((field, index) => {
            result[field] = match[index + 1] || null; // +1 –ø–æ—Ç–æ–º—É —á—Ç–æ match[0] - —ç—Ç–æ –≤—Å—è —Å—Ç—Ä–æ–∫–∞
        });

        return result;
    },

    // –°–æ–∑–¥–∞–Ω–∏–µ HTML span —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
    createStatusSpan(value, status = 'good', additionalClasses = '') {
        const statusToClass = {
            'good': 'green',
            'warning': 'yellow', 
            'critical': 'red',
            'success': 'green'
        };

        const statusClass = statusToClass[status] || 'green';
        const classes = `status-${statusClass} ${additionalClasses}`.trim();

        return `<span class="${classes}">${value}</span>`;
    }
};